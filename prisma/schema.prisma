// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id            String    @id @default(uuid())
  name          String    @unique
  login         String    @unique
  passwordHash  String
  logo          String?
  Message       Message[]
  TalkMembers   TalkMembers[]
  isFriendsWith       User[]    @relation("UserFriends") 
  areFriendsWithHim   User[]    @relation("UserFriends")
  friendRequestFrom   User[]    @relation("UserFriendRequests")
  friendRequestTo     User[]    @relation("UserFriendRequests")
}

model TalkType{
  id            Int       @id @default(autoincrement())
  name          String    @unique
  Talk          Talk[]
}

model Talk{
  id            String    @id @default(uuid())
  talktype      TalkType  @relation(fields: [typeId],references: [id], onDelete: Cascade)
  typeId        Int
  Message       Message[]

  TalkMembers TalkMembers[]
}

model Message {
  id            String    @id @default(uuid())
  text          String?
  image         String?
  timestamp     BigInt
  from          User      @relation(fields: [fromId], references: [id], onDelete: Cascade)
  fromId        String
  talk          Talk      @relation(fields: [talkId],references: [id], onDelete: Cascade )
  talkId        String 
}

model TalkMembers {
  // id            String    @id @default(uuid())
  talk          Talk      @relation(fields: [talkId],references: [id],onDelete: Cascade)
  talkId        String
  user          User      @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId        String

  @@id([talkId,userId])
}

model Server {
  id            String    @id @default(uuid())
  name          String
}